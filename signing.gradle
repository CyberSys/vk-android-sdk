/*******************************************************************************
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 vk.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

if (System.getenv('SDK_UPDATE') == "1") {
    afterEvaluate {

        task sourceJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            archiveClassifier.set('sources')
        }

        task javadoc(type: Javadoc) {
            excludes = ['**/**']
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            classpath += configurations.javadocDeps
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc.destinationDir
            archiveClassifier.set('javadoc')
        }

        signing {
            println("Signing SDK...")
            sign publishing.publications
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        println("Signing config reading...")
        def id = System.getenv('PGP_KEY_ID')
        def password = System.getenv('PGP_KEY_PASS')
        def file = System.getenv('PGP_KEY_PATH')

        allprojects {
            ext."signing.keyId" = id
            ext."signing.password" = password
            ext."signing.secretKeyRingFile" = file
        }
    }
}